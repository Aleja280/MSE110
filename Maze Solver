#pragma config(Sensor, S1,     Ultra_Sensor,   sensorEV3_Ultrasonic)
#pragma config(Motor,  motorA,          Left_Motor,    tmotorEV3_Large, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motorB,          Right_Motor,   tmotorEV3_Large, PIDControl, driveRight, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//--------------------------------------------------------


typedef struct {
	int NorthWall;
	int EastWall;
	int SoutWall;
	int WestWall;
	char status;
} cell;

cell grid[4][6];


// Start in cell [0][0]
int StartPosRow=0;
int StartPosCol=0;

//Robot direction
int RobotDirection=0;  //N=0, E=1, S=2, W=3;

//Set starting position
int CurrentPosRow=StartPosRow; // Starting position
int CurrentPosCol=StartPosCol;

//Set target cell
int TargetPosRow=3;
int TargetPosCol=5;

const int ScreenWidth = 177;
const int ScreenHeight = 127;
//--------------------------------------------------------

//Initiate functions

void DisplayStartandEnd();
void GoStraight();
void GoLeft();
void GoRight();
int Solver();
int CheckWall();


//======================================================*

task main()
{
	if(getUSDistance(Ultra_Sensor){


	}
}

//======================================================*

void MoveRobotStraight(){
	//Move straight one cell
	long start1 = getMotorEncoder(Left_Motor);
	setMotorSyncEncoder(Left_Motor, Right_Motor, 0, -598, -30);
	while (getMotorEncoder(Right_Motor) > start1 - 598) {
		sleep(1);
	}
	motor[Left_Motor] = 0;
	motor[Right_Motor] = 0;
}

void MoveRobotLeft(){

	//Turn robot90 degrees left
	setMotorSyncEncoder(Left_Motor,Right_Motor,-100, 2000, 40);
	long target=getGyroDegrees(Gyro_Sensor)-52;
	while (getGyroDegrees(Gyro_Sensor) > target) {
		sleep(1);
	}
}

void MoveRobotRight(){
	//Turn robot 90 degrees right
	setMotorSyncEncoder(Left_Motor,Right_Motor,100, 2000, 40);
	long target=getGyroDegrees(Gyro_Sensor)+52;
	while (getGyroDegrees(Gyro_Sensor) < target) {
		sleep(1);
	}
}
//-----------------------------------------------------

void GoStraight(){

	//Move robot straight one cell
	MoveRobotStraight();

	switch(RobotDirection){
		//Store position in variable
	case 0:
		CurrentPosRow++; //Robot move north
		break;

	case 1:
		CurrentPosCol++; //Robot move east
		break;

	case 2:
		CurrentPosRow--; //Robot move west
		break;

	case 3:
		CurrentPosCol--; //Robot face south
		break;

	default:
		break;
	}
}

void GoLeft(){

	//Turn robot 90 degrees left
	MoveRobotLeft();

	//Alter direction variable
	RobotDirection=RobotDirection--;

	//Keeps direction stored within bounds
	if(RobotDirection==-1){
		RobotDirection=3;

	}
}

void GoRight(){

	//Turn robot 90 degrees right
	MoveRobotRight();


	//Alter direction variable
	RobotDirection=RobotDirection++;

	//Keeps direction stored within bounds
	if(RobotDirection==4){
		RobotDirection=0;

	}
}

//--------------------------------------------------------

int CheckWall(){

	int WallStatus=0; // 0 = No Wall, 1= Wall

	switch(RobotDirection){

	case 0:
		if(Grid[CurrentPosRow][CurrentPosCol].NorthWall==1){
			WallStatus=1;
		}
		else{
			WallStatus=0; // exit the CheckWall function, Indicate Wall
		}
		break;
	case 1:
		if(Grid[CurrentPosRow][CurrentPosCol].EastWall==1){
			WallStatus=1;
		}
		else{
			WallStatus=0; // exit the CheckWall function, Indicate Wall
		}
		break;
	case 2:
		if(Grid[CurrentPosRow][CurrentPosCol].SouthWall==1){
			WallStatus=1;
		}
		else{
			WallStatus=0; // exit the CheckWall function, Indicate Wall
		}
		break;
	case 3:
		if(Grid[CurrentPosRow][CurrentPosCol].WestWall==1){
			WallStatus=1;
		}
		else{
			WallStatus=0; // exit the CheckWall function, Indicate Wall
		}
		break;
	default: break;
	}
	return WallStatus;
}

//--------------------------------------------------------

int Solver(){
	if(getSensorValue(Ultrasensor)<=10)
//--------------------------------------------------------
//int CheckWall(){
//	int WallStatus=0; // 0 = No Wall, 1= Wall

//	switch(RobotDirection){
//	case 0:
//		if(Grid[CurrentPosRow][CurrentPosCol].NorthWall==1){
//			WallStatus=1;
//		}
//		else{
//			WallStatus=0; // exit the CheckWall function, Indicate Wall
//		}
//		break;
//	case 1:
//		if(Grid[CurrentPosRow][CurrentPosCol].EastWall==1){
//			WallStatus=1;
//		}
//		else{
//			WallStatus=0; // exit the CheckWall function, Indicate Wall
//		}
//		break;
//	case 2:
//		if(Grid[CurrentPosRow][CurrentPosCol].SouthWall==1){
//			WallStatus=1;
//		}
//		else{
//			WallStatus=0; // exit the CheckWall function, Indicate Wall
//		}
//		break;
//	case 3:
//		if(Grid[CurrentPosRow][CurrentPosCol].WestWall==1){
//			WallStatus=1;
//		}
//		else{
//			WallStatus=0; // exit the CheckWall function, Indicate Wall
//		}
//		break;
//	default: break;
//	}
//	return WallStatus;
//}
//----------------------------------------------------------------
void DisplayStartandEnd(){
	int XpixelPos=0;
	int YpixelPos=0;

	if(StartPosCol==0){
		XpixelPos=ScreenWidth/12;
	}
	else{
		XpixelPos=(2*StartPosCol+1)*ScreenWidth/12;
	}

	if(StartPosRow==0){
		YpixelPos=ScreenHeight/8;
	}
	else{
		YpixelPos=(2*StartPosRow+1)*ScreenHeight/8;
	}
	displayStringAt(XpixelPos,YpixelPos,"S");

	if(TargetPosCol==0){
		XpixelPos=ScreenWidth/12;
	}
	else{
		XpixelPos=(2*TargetPosCol+1)*ScreenWidth/12;
	}

	if(TargetPosRow==0){
		YpixelPos=ScreenHeight/8;
	}
	else{
		YpixelPos=(2*TargetPosRow+1)*ScreenHeight/8;
	}
	displayStringAt(XpixelPos,YpixelPos,"E");
}
